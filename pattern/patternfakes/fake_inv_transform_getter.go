// Code generated by counterfeiter. DO NOT EDIT.
package patternfakes

import (
	"sync"

	"github.com/kieron-pivotal/rays/matrix"
	"github.com/kieron-pivotal/rays/pattern"
)

type FakeInvTransformGetter struct {
	GetInverseTransformStub        func() matrix.Matrix
	getInverseTransformMutex       sync.RWMutex
	getInverseTransformArgsForCall []struct {
	}
	getInverseTransformReturns struct {
		result1 matrix.Matrix
	}
	getInverseTransformReturnsOnCall map[int]struct {
		result1 matrix.Matrix
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeInvTransformGetter) GetInverseTransform() matrix.Matrix {
	fake.getInverseTransformMutex.Lock()
	ret, specificReturn := fake.getInverseTransformReturnsOnCall[len(fake.getInverseTransformArgsForCall)]
	fake.getInverseTransformArgsForCall = append(fake.getInverseTransformArgsForCall, struct {
	}{})
	fake.recordInvocation("GetInverseTransform", []interface{}{})
	fake.getInverseTransformMutex.Unlock()
	if fake.GetInverseTransformStub != nil {
		return fake.GetInverseTransformStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.getInverseTransformReturns
	return fakeReturns.result1
}

func (fake *FakeInvTransformGetter) GetInverseTransformCallCount() int {
	fake.getInverseTransformMutex.RLock()
	defer fake.getInverseTransformMutex.RUnlock()
	return len(fake.getInverseTransformArgsForCall)
}

func (fake *FakeInvTransformGetter) GetInverseTransformCalls(stub func() matrix.Matrix) {
	fake.getInverseTransformMutex.Lock()
	defer fake.getInverseTransformMutex.Unlock()
	fake.GetInverseTransformStub = stub
}

func (fake *FakeInvTransformGetter) GetInverseTransformReturns(result1 matrix.Matrix) {
	fake.getInverseTransformMutex.Lock()
	defer fake.getInverseTransformMutex.Unlock()
	fake.GetInverseTransformStub = nil
	fake.getInverseTransformReturns = struct {
		result1 matrix.Matrix
	}{result1}
}

func (fake *FakeInvTransformGetter) GetInverseTransformReturnsOnCall(i int, result1 matrix.Matrix) {
	fake.getInverseTransformMutex.Lock()
	defer fake.getInverseTransformMutex.Unlock()
	fake.GetInverseTransformStub = nil
	if fake.getInverseTransformReturnsOnCall == nil {
		fake.getInverseTransformReturnsOnCall = make(map[int]struct {
			result1 matrix.Matrix
		})
	}
	fake.getInverseTransformReturnsOnCall[i] = struct {
		result1 matrix.Matrix
	}{result1}
}

func (fake *FakeInvTransformGetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getInverseTransformMutex.RLock()
	defer fake.getInverseTransformMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeInvTransformGetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pattern.InvTransformGetter = new(FakeInvTransformGetter)
