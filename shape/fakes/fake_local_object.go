// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/kieron-pivotal/rays/ray"
	"github.com/kieron-pivotal/rays/shape"
	"github.com/kieron-pivotal/rays/tuple"
)

type FakeLocalObject struct {
	LocalIntersectStub        func(ray.Ray) []float64
	localIntersectMutex       sync.RWMutex
	localIntersectArgsForCall []struct {
		arg1 ray.Ray
	}
	localIntersectReturns struct {
		result1 []float64
	}
	localIntersectReturnsOnCall map[int]struct {
		result1 []float64
	}
	LocalNormalAtStub        func(tuple.Tuple) tuple.Tuple
	localNormalAtMutex       sync.RWMutex
	localNormalAtArgsForCall []struct {
		arg1 tuple.Tuple
	}
	localNormalAtReturns struct {
		result1 tuple.Tuple
	}
	localNormalAtReturnsOnCall map[int]struct {
		result1 tuple.Tuple
	}
	NameStub        func() string
	nameMutex       sync.RWMutex
	nameArgsForCall []struct {
	}
	nameReturns struct {
		result1 string
	}
	nameReturnsOnCall map[int]struct {
		result1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLocalObject) LocalIntersect(arg1 ray.Ray) []float64 {
	fake.localIntersectMutex.Lock()
	ret, specificReturn := fake.localIntersectReturnsOnCall[len(fake.localIntersectArgsForCall)]
	fake.localIntersectArgsForCall = append(fake.localIntersectArgsForCall, struct {
		arg1 ray.Ray
	}{arg1})
	fake.recordInvocation("LocalIntersect", []interface{}{arg1})
	fake.localIntersectMutex.Unlock()
	if fake.LocalIntersectStub != nil {
		return fake.LocalIntersectStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.localIntersectReturns
	return fakeReturns.result1
}

func (fake *FakeLocalObject) LocalIntersectCallCount() int {
	fake.localIntersectMutex.RLock()
	defer fake.localIntersectMutex.RUnlock()
	return len(fake.localIntersectArgsForCall)
}

func (fake *FakeLocalObject) LocalIntersectCalls(stub func(ray.Ray) []float64) {
	fake.localIntersectMutex.Lock()
	defer fake.localIntersectMutex.Unlock()
	fake.LocalIntersectStub = stub
}

func (fake *FakeLocalObject) LocalIntersectArgsForCall(i int) ray.Ray {
	fake.localIntersectMutex.RLock()
	defer fake.localIntersectMutex.RUnlock()
	argsForCall := fake.localIntersectArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLocalObject) LocalIntersectReturns(result1 []float64) {
	fake.localIntersectMutex.Lock()
	defer fake.localIntersectMutex.Unlock()
	fake.LocalIntersectStub = nil
	fake.localIntersectReturns = struct {
		result1 []float64
	}{result1}
}

func (fake *FakeLocalObject) LocalIntersectReturnsOnCall(i int, result1 []float64) {
	fake.localIntersectMutex.Lock()
	defer fake.localIntersectMutex.Unlock()
	fake.LocalIntersectStub = nil
	if fake.localIntersectReturnsOnCall == nil {
		fake.localIntersectReturnsOnCall = make(map[int]struct {
			result1 []float64
		})
	}
	fake.localIntersectReturnsOnCall[i] = struct {
		result1 []float64
	}{result1}
}

func (fake *FakeLocalObject) LocalNormalAt(arg1 tuple.Tuple) tuple.Tuple {
	fake.localNormalAtMutex.Lock()
	ret, specificReturn := fake.localNormalAtReturnsOnCall[len(fake.localNormalAtArgsForCall)]
	fake.localNormalAtArgsForCall = append(fake.localNormalAtArgsForCall, struct {
		arg1 tuple.Tuple
	}{arg1})
	fake.recordInvocation("LocalNormalAt", []interface{}{arg1})
	fake.localNormalAtMutex.Unlock()
	if fake.LocalNormalAtStub != nil {
		return fake.LocalNormalAtStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.localNormalAtReturns
	return fakeReturns.result1
}

func (fake *FakeLocalObject) LocalNormalAtCallCount() int {
	fake.localNormalAtMutex.RLock()
	defer fake.localNormalAtMutex.RUnlock()
	return len(fake.localNormalAtArgsForCall)
}

func (fake *FakeLocalObject) LocalNormalAtCalls(stub func(tuple.Tuple) tuple.Tuple) {
	fake.localNormalAtMutex.Lock()
	defer fake.localNormalAtMutex.Unlock()
	fake.LocalNormalAtStub = stub
}

func (fake *FakeLocalObject) LocalNormalAtArgsForCall(i int) tuple.Tuple {
	fake.localNormalAtMutex.RLock()
	defer fake.localNormalAtMutex.RUnlock()
	argsForCall := fake.localNormalAtArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLocalObject) LocalNormalAtReturns(result1 tuple.Tuple) {
	fake.localNormalAtMutex.Lock()
	defer fake.localNormalAtMutex.Unlock()
	fake.LocalNormalAtStub = nil
	fake.localNormalAtReturns = struct {
		result1 tuple.Tuple
	}{result1}
}

func (fake *FakeLocalObject) LocalNormalAtReturnsOnCall(i int, result1 tuple.Tuple) {
	fake.localNormalAtMutex.Lock()
	defer fake.localNormalAtMutex.Unlock()
	fake.LocalNormalAtStub = nil
	if fake.localNormalAtReturnsOnCall == nil {
		fake.localNormalAtReturnsOnCall = make(map[int]struct {
			result1 tuple.Tuple
		})
	}
	fake.localNormalAtReturnsOnCall[i] = struct {
		result1 tuple.Tuple
	}{result1}
}

func (fake *FakeLocalObject) Name() string {
	fake.nameMutex.Lock()
	ret, specificReturn := fake.nameReturnsOnCall[len(fake.nameArgsForCall)]
	fake.nameArgsForCall = append(fake.nameArgsForCall, struct {
	}{})
	fake.recordInvocation("Name", []interface{}{})
	fake.nameMutex.Unlock()
	if fake.NameStub != nil {
		return fake.NameStub()
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.nameReturns
	return fakeReturns.result1
}

func (fake *FakeLocalObject) NameCallCount() int {
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	return len(fake.nameArgsForCall)
}

func (fake *FakeLocalObject) NameCalls(stub func() string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = stub
}

func (fake *FakeLocalObject) NameReturns(result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	fake.nameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalObject) NameReturnsOnCall(i int, result1 string) {
	fake.nameMutex.Lock()
	defer fake.nameMutex.Unlock()
	fake.NameStub = nil
	if fake.nameReturnsOnCall == nil {
		fake.nameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.nameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeLocalObject) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.localIntersectMutex.RLock()
	defer fake.localIntersectMutex.RUnlock()
	fake.localNormalAtMutex.RLock()
	defer fake.localNormalAtMutex.RUnlock()
	fake.nameMutex.RLock()
	defer fake.nameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLocalObject) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ shape.LocalObject = new(FakeLocalObject)
